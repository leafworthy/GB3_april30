//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.12.0
//     from Assets/TesterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/TesterControls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @TestControls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @TestControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TesterControls"",
    ""maps"": [
        {
            ""name"": ""Tester"",
            ""id"": ""2adad97b-7c60-4a43-a912-9c46d0091af5"",
            ""actions"": [
                {
                    ""name"": ""ToggleSystem"",
                    ""type"": ""Button"",
                    ""id"": ""60da0d72-2e1f-4a0e-87e6-188d5da8082d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForceDawn"",
                    ""type"": ""Button"",
                    ""id"": ""96ca20b2-8377-484a-969f-41992674527c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForceNoon"",
                    ""type"": ""Button"",
                    ""id"": ""03f9696d-642a-47f4-913b-be6e43cacfd3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForceSunset"",
                    ""type"": ""Button"",
                    ""id"": ""402f8d1e-9b5e-4968-865d-1dbcedeab551"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForceNight"",
                    ""type"": ""Button"",
                    ""id"": ""b95565d5-a9db-440c-8ca0-d4f6baa0e8d3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForceSpawn"",
                    ""type"": ""Button"",
                    ""id"": ""76df602d-9602-4a4b-a12c-ad46e0a375ce"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""08e29998-9e7b-4077-b793-79d81d24c23f"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSystem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de3b91ab-8c0e-4aed-99a8-b8a09de46e3f"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceDawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46157837-b78c-42e2-a622-dd3e03f6dfb5"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceNoon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""738e7e6f-729f-4075-8aeb-017b80560bb9"",
                    ""path"": ""<Keyboard>/f4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceSunset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6f3cc72-c705-47ca-990d-a419573acc28"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceNight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84f69aae-1412-4f50-8f25-728b94202f84"",
                    ""path"": ""<Keyboard>/f6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceSpawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tester
        m_Tester = asset.FindActionMap("Tester", throwIfNotFound: true);
        m_Tester_ToggleSystem = m_Tester.FindAction("ToggleSystem", throwIfNotFound: true);
        m_Tester_ForceDawn = m_Tester.FindAction("ForceDawn", throwIfNotFound: true);
        m_Tester_ForceNoon = m_Tester.FindAction("ForceNoon", throwIfNotFound: true);
        m_Tester_ForceSunset = m_Tester.FindAction("ForceSunset", throwIfNotFound: true);
        m_Tester_ForceNight = m_Tester.FindAction("ForceNight", throwIfNotFound: true);
        m_Tester_ForceSpawn = m_Tester.FindAction("ForceSpawn", throwIfNotFound: true);
    }

    ~@TestControls()
    {
        UnityEngine.Debug.Assert(!m_Tester.enabled, "This will cause a leak and performance issues, TestControls.Tester.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tester
    private readonly InputActionMap m_Tester;
    private List<ITesterActions> m_TesterActionsCallbackInterfaces = new List<ITesterActions>();
    private readonly InputAction m_Tester_ToggleSystem;
    private readonly InputAction m_Tester_ForceDawn;
    private readonly InputAction m_Tester_ForceNoon;
    private readonly InputAction m_Tester_ForceSunset;
    private readonly InputAction m_Tester_ForceNight;
    private readonly InputAction m_Tester_ForceSpawn;
    /// <summary>
    /// Provides access to input actions defined in input action map "Tester".
    /// </summary>
    public struct TesterActions
    {
        private @TestControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TesterActions(@TestControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Tester/ToggleSystem".
        /// </summary>
        public InputAction @ToggleSystem => m_Wrapper.m_Tester_ToggleSystem;
        /// <summary>
        /// Provides access to the underlying input action "Tester/ForceDawn".
        /// </summary>
        public InputAction @ForceDawn => m_Wrapper.m_Tester_ForceDawn;
        /// <summary>
        /// Provides access to the underlying input action "Tester/ForceNoon".
        /// </summary>
        public InputAction @ForceNoon => m_Wrapper.m_Tester_ForceNoon;
        /// <summary>
        /// Provides access to the underlying input action "Tester/ForceSunset".
        /// </summary>
        public InputAction @ForceSunset => m_Wrapper.m_Tester_ForceSunset;
        /// <summary>
        /// Provides access to the underlying input action "Tester/ForceNight".
        /// </summary>
        public InputAction @ForceNight => m_Wrapper.m_Tester_ForceNight;
        /// <summary>
        /// Provides access to the underlying input action "Tester/ForceSpawn".
        /// </summary>
        public InputAction @ForceSpawn => m_Wrapper.m_Tester_ForceSpawn;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Tester; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TesterActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TesterActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TesterActions" />
        public void AddCallbacks(ITesterActions instance)
        {
            if (instance == null || m_Wrapper.m_TesterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TesterActionsCallbackInterfaces.Add(instance);
            @ToggleSystem.started += instance.OnToggleSystem;
            @ToggleSystem.performed += instance.OnToggleSystem;
            @ToggleSystem.canceled += instance.OnToggleSystem;
            @ForceDawn.started += instance.OnForceDawn;
            @ForceDawn.performed += instance.OnForceDawn;
            @ForceDawn.canceled += instance.OnForceDawn;
            @ForceNoon.started += instance.OnForceNoon;
            @ForceNoon.performed += instance.OnForceNoon;
            @ForceNoon.canceled += instance.OnForceNoon;
            @ForceSunset.started += instance.OnForceSunset;
            @ForceSunset.performed += instance.OnForceSunset;
            @ForceSunset.canceled += instance.OnForceSunset;
            @ForceNight.started += instance.OnForceNight;
            @ForceNight.performed += instance.OnForceNight;
            @ForceNight.canceled += instance.OnForceNight;
            @ForceSpawn.started += instance.OnForceSpawn;
            @ForceSpawn.performed += instance.OnForceSpawn;
            @ForceSpawn.canceled += instance.OnForceSpawn;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TesterActions" />
        private void UnregisterCallbacks(ITesterActions instance)
        {
            @ToggleSystem.started -= instance.OnToggleSystem;
            @ToggleSystem.performed -= instance.OnToggleSystem;
            @ToggleSystem.canceled -= instance.OnToggleSystem;
            @ForceDawn.started -= instance.OnForceDawn;
            @ForceDawn.performed -= instance.OnForceDawn;
            @ForceDawn.canceled -= instance.OnForceDawn;
            @ForceNoon.started -= instance.OnForceNoon;
            @ForceNoon.performed -= instance.OnForceNoon;
            @ForceNoon.canceled -= instance.OnForceNoon;
            @ForceSunset.started -= instance.OnForceSunset;
            @ForceSunset.performed -= instance.OnForceSunset;
            @ForceSunset.canceled -= instance.OnForceSunset;
            @ForceNight.started -= instance.OnForceNight;
            @ForceNight.performed -= instance.OnForceNight;
            @ForceNight.canceled -= instance.OnForceNight;
            @ForceSpawn.started -= instance.OnForceSpawn;
            @ForceSpawn.performed -= instance.OnForceSpawn;
            @ForceSpawn.canceled -= instance.OnForceSpawn;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TesterActions.UnregisterCallbacks(ITesterActions)" />.
        /// </summary>
        /// <seealso cref="TesterActions.UnregisterCallbacks(ITesterActions)" />
        public void RemoveCallbacks(ITesterActions instance)
        {
            if (m_Wrapper.m_TesterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TesterActions.AddCallbacks(ITesterActions)" />
        /// <seealso cref="TesterActions.RemoveCallbacks(ITesterActions)" />
        /// <seealso cref="TesterActions.UnregisterCallbacks(ITesterActions)" />
        public void SetCallbacks(ITesterActions instance)
        {
            foreach (var item in m_Wrapper.m_TesterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TesterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TesterActions" /> instance referencing this action map.
    /// </summary>
    public TesterActions @Tester => new TesterActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Tester" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TesterActions.AddCallbacks(ITesterActions)" />
    /// <seealso cref="TesterActions.RemoveCallbacks(ITesterActions)" />
    public interface ITesterActions
    {
        /// <summary>
        /// Method invoked when associated input action "ToggleSystem" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToggleSystem(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ForceDawn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnForceDawn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ForceNoon" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnForceNoon(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ForceSunset" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnForceSunset(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ForceNight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnForceNight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ForceSpawn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnForceSpawn(InputAction.CallbackContext context);
    }
}
